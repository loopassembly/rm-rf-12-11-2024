
-------------------------Dining Philosophers Problem using semaphores-------------------
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

sem_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void* philosopher(void* arg) {
    int id = *(int*)arg;
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        sem_wait(&forks[left]);
        sem_wait(&forks[right]);

        printf("Philosopher %d is eating.\n", id);
        sleep(1);

        sem_post(&forks[left]);
        sem_post(&forks[right]);
    }
}

int main() {
    int ids[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        sem_init(&forks[i], 0, 1);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        pthread_join(philosophers[i], NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++)
        sem_destroy(&forks[i]);

    return 0;
}


----------------------------First-Come, First-Served (FCFS) Scheduling Algorithm
#include <stdio.h>

int main() {
    int n, i;
    int burst_time[20], wait_time[20], turn_around_time[20];
    float avg_wait_time = 0, avg_turn_around_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    wait_time[0] = 0;

    for (i = 1; i < n; i++)
        wait_time[i] = wait_time[i - 1] + burst_time[i - 1];

    for (i = 0; i < n; i++)
        turn_around_time[i] = burst_time[i] + wait_time[i];



-------------------Shortest Job First (SJF) Scheduling Algorithm------------


#include <stdio.h>

int main() {
    int n, burst_time[20], wait_time[20], turn_around_time[20];
    int i, j, pos, temp;
    float avg_wait_time = 0, avg_turn_around_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    for (i = 0; i < n; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (burst_time[j] < burst_time[pos])
                pos = j;
        }
        temp = burst_time[i];
        burst_time[i] = burst_time[pos];
        burst_time[pos] = temp;
    }

    wait_time[0] = 0;

    for (i = 1; i < n; i++)
        wait_time[i] = wait_time[i - 1] + burst_time[i - 1];

    for (i = 0; i < n; i++)
        turn_around_time[i] = burst_time[i] + wait_time[i];

    for (i = 0; i < n; i++) {
        avg_wait_time += wait_time[i];
        avg_turn_around_time += turn_around_time[i];
    }

    avg_wait_time /= n;
    avg_turn_around_time /= n;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++)
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i], wait_time[i], turn_around_time[i]);

    printf("\nAverage Waiting Time: %.2f", avg_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turn_around_time);

    return 0;
}



-----------------------simulate the CPU scheduling priority algorithm-------------

#include <stdio.h>

int main() {
    int n, i, j, pos, temp;
    int burst_time[20], priority[20], wait_time[20], turn_around_time[20], process[20];
    float avg_wait_time = 0, avg_turn_around_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter burst time and priority for process %d: ", i + 1);
        scanf("%d %d", &burst_time[i], &priority[i]);
        process[i] = i + 1;
    }

    for (i = 0; i < n; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (priority[j] < priority[pos])
                pos = j;
        }

        temp = priority[i];
        priority[i] = priority[pos];
        priority[pos] = temp;

        temp = burst_time[i];
        burst_time[i] = burst_time[pos];
        burst_time[pos] = temp;

        temp = process[i];
        process[i] = process[pos];
        process[pos] = temp;
    }

    wait_time[0] = 0;

    for (i = 1; i < n; i++)
        wait_time[i] = wait_time[i - 1] + burst_time[i - 1];

    for (i = 0; i < n; i++)
        turn_around_time[i] = burst_time[i] + wait_time[i];

    for (i = 0; i < n; i++) {
        avg_wait_time += wait_time[i];
        avg_turn_around_time += turn_around_time[i];
    }

    avg_wait_time /= n;
    avg_turn_around_time /= n;

    printf("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++)
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", process[i], burst_time[i], priority[i], wait_time[i], turn_around_time[i]);

    printf("\nAverage Waiting Time: %.2f", avg_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turn_around_time);

    return 0;
}


----------------------To simulate Bankers algorithm----------------

#include <stdio.h>

int main() {
    int n, m, i, j, k;
    int allocation[10][10], max[10][10], available[10];
    int need[10][10], finish[10], safe_sequence[10];
    int count = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the number of resources: ");
    scanf("%d", &m);

    printf("Enter the allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &allocation[i][j]);

    printf("Enter the maximum matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter the available resources:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &available[i]);

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - allocation[i][j];

    for (i = 0; i < n; i++)
        finish[i] = 0;

    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (finish[i] == 0) {
                int flag = 1;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > available[j]) {
                        flag = 0;
                        break;
                    }
                }

                if (flag) {
                    for (j = 0; j < m; j++)
                        available[j] += allocation[i][j];
                    safe_sequence[count++] = i;
                    finish[i] = 1;
                }
            }
        }
    }

    int safe = 1;
    for (i = 0; i < n; i++) {
        if (finish[i] == 0) {
            safe = 0;
            break;
        }
    }

    if (safe) {
        printf("System is in a safe state.\nSafe sequence is: ");
        for (i = 0; i < n; i++)
         


------------------To simulating contiguous memory allocation techniques: First Fit, Best Fit, and Worst Fit.

#include <stdio.h>

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx])
                    bestIdx = j;
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nBest Fit Allocation\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    for (int i = 0; i < n; i++) {
        int worstIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx])
                    worstIdx = j;
            }
        }

        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }

    printf("\nWorst Fit Allocation\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    int blockSize1[m], blockSize2[m], blockSize3[m];
    for (int i = 0; i < m; i++) {
        blockSize1[i] = blockSize[i];
        blockSize2[i] = blockSize[i];
        blockSize3[i] = blockSize[i];
    }

    firstFit(blockSize1, m, processSize, n);
    bestFit(blockSize2, m, processSize, n);
    worstFit(blockSize3, m, processSize, n);

    return 0;
}


--------------------Write a program to simulate FIFO, LRU and LFU page replacement techniques
algorithm

#include <stdio.h>

void fifo(int pages[], int n, int frames) {
    int frame[frames], page_faults = 0, pointer = 0;
    for (int i = 0; i < frames; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int flag = 0;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                break;
            }
        }
        if (!flag) {
            frame[pointer] = pages[i];
            pointer = (pointer + 1) % frames;
            page_faults++;
        }
    }

    printf("\nFIFO Page Replacement\nTotal page faults: %d\n", page_faults);
}

void lru(int pages[], int n, int frames) {
    int frame[frames], page_faults = 0, last_used[n];
    for (int i = 0; i < frames; i++) frame[i] = -1;

    for (int i = 0; i < n; i++) {
        int flag = 0, min = n + 1, pos = -1;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                break;
            }
        }
        if (!flag) {
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    frame[j] = pages[i];
                    page_faults++;
                    break;
                }
                for (int k = 0; k < i; k++) {
                    if (frame[j] == pages[k]) {
                        last_used[j] = k;
                        break;
                    }
                }
                if (last_used[j] < min) {
                    min = last_used[j];
                    pos = j;
                }
            }
            frame[pos] = pages[i];
            page_faults++;
        }
    }

    printf("\nLRU Page Replacement\nTotal page faults: %d\n", page_faults);
}

void lfu(int pages[], int n, int frames) {
    int frame[frames], freq[frames], page_faults = 0;
    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
        freq[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int flag = 0, min_freq = n + 1, pos = -1;
        for (int j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                freq[j]++;
                break;
            }
        }
        if (!flag) {
            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    frame[j] = pages[i];
                    freq[j] = 1;
                    page_faults++;
                    break;
                }
                if (freq[j] < min_freq) {
                    min_freq = freq[j];
                    pos = j;
                }
            }
            frame[pos] = pages[i];
            freq[pos] = 1;
            page_faults++;
        }
    }

    printf("\nLFU Page Replacement\nTotal page faults: %d\n", page_faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 4};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frames = 3;

    fifo(pages, n, frames);
    lru(pages, n, frames);
    lfu(pages, n, frames);

    return 0;
}



-------------To simulate disk scheduling algorithms FCFS-SCAN and C-SCAN-----------

#include <stdio.h>
#include <stdlib.h>

void fcfs(int arr[], int n, int head) {
    int seek_count = 0;
    int distance, cur_head;

    cur_head = head;
    for (int i = 0; i < n; i++) {
        distance = abs(arr[i] - cur_head);
        seek_count += distance;
        cur_head = arr[i];
    }
    printf("\nFCFS Disk Scheduling\nTotal seek operations = %d\n", seek_count);
}

void scan(int arr[], int n, int head, int direction) {
    int seek_count = 0;
    int distance, cur_head;
    int left = 0, right = 0;

    int temp[n];
    for (int i = 0; i < n; i++) {
        temp[i] = arr[i];
    }

    for (int i = 0; i < n; i++) {
        if (temp[i] < head) left++;
        if (temp[i] > head) right++;
    }

    qsort(temp, n, sizeof(int), (int (*)(const void *, const void *))strcmp);

    if (direction == 0) {
        for (int i = left - 1; i >= 0; i--) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
        seek_count += abs(head - 0);
        cur_head = 0;
        for (int i = left; i < n; i++) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
    } else {
        for (int i = left; i < n; i++) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
        seek_count += abs(head - 100);
        cur_head = 100;
        for (int i = left - 1; i >= 0; i--) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
    }

    printf("\nSCAN Disk Scheduling\nTotal seek operations = %d\n", seek_count);
}

void cscan(int arr[], int n, int head, int direction) {
    int seek_count = 0;
    int distance, cur_head;
    int left = 0, right = 0;

    int temp[n];
    for (int i = 0; i < n; i++) {
        temp[i] = arr[i];
    }

    for (int i = 0; i < n; i++) {
        if (temp[i] < head) left++;
        if (temp[i] > head) right++;
    }

    qsort(temp, n, sizeof(int), (int (*)(const void *, const void *))strcmp);

    if (direction == 0) {
        for (int i = left - 1; i >= 0; i--) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
        seek_count += abs(head - 0);
        cur_head = 0;
        for (int i = left; i < n; i++) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
    } else {
        for (int i = left; i < n; i++) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
        seek_count += abs(head - 100);
        cur_head = 100;
        for (int i = left - 1; i >= 0; i--) {
            distance = abs(temp[i] - cur_head);
            seek_count += distance;
            cur_head = temp[i];
        }
    }

    printf("\nC-SCAN Disk Scheduling\nTotal seek operations = %d\n", seek_count);
}

int main() {
    int arr[] = {176, 79, 34, 60, 92, 11, 41, 114};
    int n = sizeof(arr) / sizeof(arr[0]);
    int head = 50;

    fcfs(arr, n, head);
    scan(arr, n, head, 0);
    cscan(arr, n, head, 0);

    return 0;
}



------------To implement sequential file allocation method----------------------


#include <stdio.h>

void sequentialAllocation(int blockSize[], int n, int fileSize[], int m) {
    int allocation[m];
    for (int i = 0; i < m; i++) {
        allocation[i] = -1;
    }

    int blockIndex = 0;
    for (int i = 0; i < m; i++) {
        for (int j = blockIndex; j < n; j++) {
            if (blockSize[j] >= fileSize[i]) {
                allocation[i] = j;
                blockSize[j] -= fileSize[i];
                blockIndex = j + 1;
                break;
            }
        }
    }

    printf("\nSequential File Allocation\nFile No.\tFile Size\tBlock No.\n");
    for (int i = 0; i < m; i++) {
        printf("%d\t\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600}; // available blocks
    int fileSize[] = {212, 417, 112, 426};       // file sizes
    int n = sizeof(blockSize) / sizeof(blockSize[0]);
    int m = sizeof(fileSize) / sizeof(fileSize[0]);

    sequentialAllocation(blockSize, n, fileSize, m);

    return 0;
}


--------------To implement indexed file allocation method-------------------

#include <stdio.h>

void indexedAllocation(int blockSize[], int n, int fileSize[], int m) {
    int indexBlock[n], allocation[m];

    for (int i = 0; i < m; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        indexBlock[i] = -1;
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (indexBlock[j] == -1 && blockSize[j] >= fileSize[i]) {
                indexBlock[j] = i;
                allocation[i] = j;
                break;
            }
        }
    }

    printf("\nIndexed File Allocation\nFile No.\tFile Size\tBlock No.\n");
    for (int i = 0; i < m; i++) {
        printf("%d\t\t%d\t\t", i + 1, fileSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int fileSize[] = {212, 417, 112, 426};
    int n = sizeof(blockSize) / sizeof(blockSize[0]);
    int m = sizeof(fileSize) / sizeof(fileSize[0]);

    indexedAllocation(blockSize, n, fileSize, m);

    return 0;
}




